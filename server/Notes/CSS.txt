==========================================================================================================
											CSS (Cascading Style Sheets)
==========================================================================================================

1. How to use CSS

    (i) To add CSS inside the HTML File type "<style></style>" and then Your CSS content ()

    (ii) To Link a CSS file to the html file type this "<link rel="stylesheet" href="example.css">" in the head element in html 

    (iii) (Not Recommended) You can add A "style" attribute in the element and customize it! (warning: It's a Nightmare to Manage the website)

2. Syntax:
    Selector   property   color
        ↓         ↓         ↓
	    p {     color:     red;  }

3. Selectors (Both for Beginners and some Advance stuff)

    (i) Introduction:
        
        CSS selectors are an essential part of CSS (Cascading Style Sheets) that allow you to target and apply styles to specific HTML elements on your web page. They work by selecting elements based on various criteria, such as element names, classes, ID's, attributes, and more. Let's explain

    (ii) Element Selector: The simplest CSS selector is the element selector. It targets all instances of a particular HTML element. For example:

        p {
            color: blue;
        }

        This CSS rule targets all <p> elements and changes their text color to blue.

    (iii) Class Selector: The class selector selects elements based on their class attribute. It is denoted by a dot "." followed by the class name. For example:-

        HTML:
        
        <p class="important">This paragraph will be bold</p>

        CSS:

        .important {
            font-weight: bold;
        }
        
        (a) This CSS rule targets all elements with the class "important" and makes their text bold.

    (vi) ID Selector: The ID selector selects an element based on its unique ID attribute. It is denoted by a hash (#) followed by the ID name. For example:-

        HTML:

        <div id="header">This is the header.</div>

        CSS:

        #header {
            background-color: gray;
        }

        (a) This CSS rule targets the element with the ID "header" and gives it a gray background.

    (v) Descendant Selector: The descendant selector targets an element that is a descendant of another element. It uses a space to separate the ancestor and descendant. For example:-

        HTML:
        
        <div>
            <p>This is a paragraph inside a div.</p>
        </div>

        CSS:
        
        div p {
            color: green;
        }

        (a) This CSS rule targets all <p> elements inside a <div> and changes their text color to green.

    (vi) Child Selector: The child selector targets an element that is a direct child of another element. It uses the greater than symbol (>) to separate the parent and child. For example:

        HTML:

        <ul>
            <li>Item 1</li>
            <li>Item 2</li>
        </ul>

        CSS:
        
        ul > li {
            list-style: square;
        }

        (a) This CSS rule targets all <li> elements that are direct children of a <ul> and changes their list style to square bullets.

    (vii) Attribute Selector: The attribute selector targets elements based on their attributes. It is denoted with square brackets and can have various modifiers. For example:

        HTML:

        <input type="text" />

        CSS:

        input[type="text"] {
            border: 1px solid black;
        }

        (a) This CSS rule targets all <input> elements with a type attribute set to "text" and adds a black border to them.

    (viii) Pseudo-classes and Pseudo-elements: Pseudo-classes and pseudo-elements allow you to style elements based on their state or position. Pseudo-classes start with a colon (:), while pseudo-elements use double colons (::). Here are a few examples:-

        /* Styling will be applied the link element when is hovered */

        a:hover {
          text-decoration: underline;
        }

        /*Styling will be applied to the first line of the paragraph*/
        
        p::first-line {
          font-weight: bold;
        }

        (a) These CSS rules style links when hovered and apply bold font-weight to the first line of a paragraph.

    Here's Some Advance Concepts
    
    (ix) Combining Selectors: You can combine multiple selectors together to target specific elements more precisely. For example:-

        /* Targets all h1 and h2 elements inside a div with class "container" */

        div.container h1, div.container h2 {
          color: red;
        }

    (x) Universal Selector: The universal selector (*) targets all elements on the page. Use it with caution, as it can significantly impact performance. for example:-

        /* Applies a border to all elements */
        * {
          border: 1px solid black;
        }

    (xi) Multiple Classes and Attribute Selectors: You can target elements with multiple classes or specific attribute values. for example:-

        /* Targets elements with both "important" and "highlight" classes */
        .important.highlight {
          background-color: yellow;
        }

        /* Targets elements with a class that starts with "btn-" */
        [class^="btn-"] {
          background-color: blue;
        }

    Here's Some Even Advance CSS Selectors

    (xii) Sibling Combinator (+): The sibling combinator selects an element that is the next sibling of another element. It targets an element immediately following the specified element. For example:

        HTML:
        
        <p>Paragraph 1</p>
        <p>Paragraph 2</p>
        
        CSS:

        /* Targets the second <p> element (Paragraph 2) */
        p + p {
          color: blue;
        }

        (a) This CSS rule targets the second <p> element (Paragraph 2) and changes its text color to blue.

    (xiii) General Sibling Combinator (~): The general sibling combinator is similar to the sibling combinator but selects all sibling elements that come after the specified element, not just the immediate next sibling. For example:-

        HTML:

        <p>Paragraph 1</p>
        <span>Span 1</span>
        <p>Paragraph 2</p>

        CSS:

        /* Targets both <p> elements (Paragraph 1 and Paragraph 2) */
        p ~ p {
            font-style: italic;
        }

        (a) This CSS rule targets both <p> elements (Paragraph 1 and Paragraph 2) and applies italic font style to them.

    (xiv) :not() Pseudo-class: The :not() pseudo-class allows you to exclude elements from a selection. It is particularly useful when you want to apply styles to all elements of a certain type except for a specific one. For example:

        HTML:
        
        <ul>
            <li>Item 1</li>
            <li class="special">Special Item</li>
            <li>Item 2</li>
        </ul>

        CSS:

        /* Targets all <li> elements except the one with class "special" */
        li:not(.special) {
          color: green;
        }

        (a) This CSS rule targets all <li> elements inside the <ul> except for the one with the class "special" and changes their text color to green.

    (xv) :empty Pseudo-class: The :empty pseudo-class targets elements that have no content (including spaces, line breaks, etc.). For example:

        HTML:

        <p></p>
        <span>Hello</span>
        <div></div>

        CSS:
        
        /* Targets empty <p> and <div> elements */
        :empty {
          display: none;
        }

        (a) This CSS rule targets empty <p> and <div> elements and hides them by setting their display property to none.

    (xi) :first-child, :last-child, :only-child Pseudo-classes: These pseudo-classes target elements based on their position as a child within their parent. For example:

        HTML:

            <ul>
              <li>First Item</li>
              <li>Second Item</li>
              <li>Third Item</li>
            </ul>

        CSS:

            /* Targets the first and last <li> elements */
            li:first-child, li:last-child {
              font-weight: bold;
            }

            /* Targets the only <li> element */
            li:only-child {
              background-color: yellow;
            }

        These CSS rules target the first and last <li> elements and make their text bold. The third rule targets the only <li> element and g ives it a yellow background.

Properties & their Values:

4. Text Properties

    (i) color

        (a) `color` is a property in CSS that allows you to change text color

            selector {
                color: red;
            }
    
            (I) It's value can be a `Color` value (Go to Section `Color Values` to find possible values for it)
        
    (ii) font
    
        (a) font property in CSS is a shorthand property that allows you to set various font-related properties in a single declaration. It simplifies the process of styling text by combining several font properties into one line. The general syntax of the font property is as follows:

        (b) Syntax:

            font: [font-style] [font-variant] [font-weight] [font-size]/[line-height] [font-family];

        Sub-Properties:

        (c) font-style: It defines the style of the font (normal, italic, or oblique).

            (I) Values: `normal`, `italic`, or `oblique`.

        (d) font-variant: It defines whether the text should be in normal or small-caps variant.

            (I) Values: `normal` or `small-caps`.

        (e) font-weight: It defines the thickness of the font characters.

            (I) Values: Numeric values like `100`, `200`, ..., `900`, or keywords like `normal`, `bold`, `bolder`, `lighter`.

        (f) font-size: It specifies the size of the font.

            (I) Values: Absolute values (e.g., 12px, 16pt), relative values (e.g., 1.2em, 110%), or keywords (e.g., medium, large etc).

        (g) line-height: It defines the height of a line of text. It is often expressed as a multiple of the font size.

            (I) Values: Numeric values, unitless numbers, percentages, or keywords like normal.

        (h) font-family: It specifies the font family for the text.

            (I) Values: Font family names or generic font family keywords like serif, sans-serif, monospace, etc.

        (i) Here's an example of using the font property:

            /* Shorthand notation */
            font: italic small-caps bold 16px/1.5 "Helvetica", sans-serif;

            /* Expanded notation */
            font-style: italic;
            font-variant: small-caps;
            font-weight: bold;
            font-size: 16px;
            line-height: 1.5;
            font-family: "Helvetica", sans-serif;

        (j) You can use the font shorthand to set these properties in a single line or individually set each property according to your requirements.

    (iii) text

        Properties that start with text in CSS are related to the styling and layout of text content within HTML elements. Here are some commonly used properties that start with text:

        (a) `text-align`: It sets the horizontal alignment of text content within its container.

            (I) Values: left, right, center, justify.

            text-align: center;

        (b) `text-decoration`: It specifies the decoration added to text, such as underlining or striking through.

            (I) Values: none, underline, overline, line-through.

            text-decoration: underline;

        (c) `text-transform`: It controls the capitalization of text.

            (I) Values: none, uppercase, lowercase, capitalize.

            text-transform: uppercase;

        (d) `text-indent`: It sets the indentation of the first line of text within an element.

            (I) Values: Length, percentage.

            text-indent: 20px;

        (e) `text-overflow`: It specifies how overflowed content that is not displayed should be signaled to the user.

            (I) Values: clip, ellipsis.

            text-overflow: ellipsis;

        (f) `text-shadow`: It adds shadow to text.

            (I) Values: Shadow properties (e.g., 1px 1px 2px black).

            text-shadow: 1px 1px 2px black;

        (g) `text-align-last`: It aligns the last line of text in a block element.

            (I) Values: auto, start, end, left, right, center, justify.

            text-align-last: center;

        (h) text-justify: It defines the justification method used when text-align is set to justify.

            (I) Values: auto, inter-word, inter-character, none.

            text-justify: inter-word;
    
5. Area Related Properties

    (i) background

        (a) The syntax for the background property is as follows:

            selector {
                background: [background-color] [background-image] [background-repeat] [background-position] [background-size] [background-attachment] [background-origin] [background-clip];
            }

        Here's the Breakdown of each of These values as a property

        (b) background-color: To set a background color for an element, you can use the background-color property. For example, to set the background color of a <div> element to light blue, you can use the following CSS:

            selector {
                background-color: lightblue;
            }

            (I) You can use color names, hexadecimal values, RGB values, or HSL values to specify the background color.

        (c) background-image: You can set an image as the background of an element using the background-image property and many other things

            selector {
                background-image: value;
            }

            The Value can be one of the following:

            (I) Image: You can provide a path to an image file. This can be a relative or absolute URL:

                url('image.jpg')

            (II) Gradient: You can use CSS gradients as background images. Gradients can be linear (straight) or radial (circular):

                linear-gradient(to right, red, blue)
                radial-gradient(circle, red, blue)

            (III) Image Sets: You can provide multiple images and their corresponding resolutions, and the browser will choose the appropriate one based on the device's pixel density (1x, 2x, etc.):

                image-set(url('image.jpg') 1x, url('high-res-image.jpg') 2x)

            (IV) none: This value removes any background image set for the element.

                none
            
            Here's an example using the background-image property with a combination of these values:

                .element {
                    background-image: url('image.jpg'), linear-gradient(to right, red, blue);
                }

                In this example, the element will have a background image composed of both the specified image file (image.jpg) and a linear gradient from red to blue.

                Remember that you can use multiple background images by separating them with commas, and the images will be layered on top of each other in the order they are listed. The first image listed will be the top layer, and subsequent images will be beneath it.
            
        (d) background-repeat: By default, background images repeat both horizontally and vertically. You can control the repetition behavior using the background-repeat property. For example, to prevent the background image from repeating, you can use the value no-repeat as follows:

            selector {
                background-repeat: no-repeat;
            }

            (I) Other values include repeat (repeat both horizontally and vertically), `repeat-x` (repeat only horizontally), and `repeat-y` (repeat only vertically).

        (e) background-position: You can control the position of the background image using the background-position property. It allows you to specify the horizontal and vertical position of the image. For example, to position the background image at the top right corner, you can use the following CSS:

            selector {
                background-position: top right;
            }

            (I) You can use keywords like top, bottom, left, and right, or you can use specific length values or percentages to define the position.

        (f) background-size: The background-size property allows you to control the size of the background image. You can set it to a specific length value, a percentage, or use keywords like cover or contain. For example, to make the background image cover the entire element, you can use the value cover as follows:

            selector {
                background-size: cover;
            }

            (I) This will resize the background image proportionally to cover the entire element, cropping if necessary.

        (g) "background-attachment" property is used to control whether the background image scrolls with the content or remains fixed in place. It affects how the background image is positioned relative to the element and the viewport. Here's how you can use the background-attachment property:

            selector {
                background-attachment: value;
            }

            The value can be one of the following:

            (I) scroll: This is the default value. The background image scrolls along with the element's content as you scroll the page.
            (II) fixed: The background image remains fixed in place relative to the viewport. It does not scroll with the content. This means that even if you scroll the page, the background image stays in the same position.
            (c) local: The background image scrolls with the element's content. It behaves similarly to the scroll value, but it allows the background to scroll within the element if the content inside the element overflows.

            Here's an example that demonstrates how to use the background-attachment property:

            body {
                background-image: url("image.jpg");
                background-attachment: fixed;
            }

        (h) background-origin: property is used to specify the positioning area of the background image. It determines where the background image starts within the element's background positioning area. The background positioning area is defined by the element's padding box, border box, or content box. Here's how you can use the background-origin property:

            selector {
                background-origin: value;
            }

            The value can be one of the following:

            (I) padding-box (default): The background image starts from the edge of the element's padding box. It includes the padding area but does not include the border or margin areas.
            (II) border-box: The background image starts from the edge of the element's border box. It includes both the padding and border areas but does not include the margin area.
            (III) content-box: The background image starts from the edge of the element's content box. It includes only the content area and does not include the padding, border, or margin areas.

            Here's an example that demonstrates how to use the background-origin property:

            div {
                background-image: url("image.jpg");
                background-origin: border-box;
            }

        (i) background-clip: property is used to determine the painting area of the background. It specifies how far the background extends within an element, relative to the background origin. This property allows you to control whether the background is clipped to the content box, padding box, or border box. Here's how you can use the background-clip property:

            selector {
                background-clip: value;
            }

            The value can be one of the following:

            (I) border-box (default): The background is painted up to the outer edge of the element's border box. It extends underneath the border and covers the padding and content areas.

            (II) padding-box: The background is painted up to the outer edge of the element's padding box. It extends underneath the padding area and covers only the content area.

            (III) content-box: The background is painted only within the element's content box. It does not extend beyond the content area and is clipped by the padding and border areas.

            Here's an example that demonstrates how to use the background-clip property:

            div {
                background-image: url("image.jpg");
                background-clip: padding-box;
            }

    (ii) Border
    
        (a) "border-width" This specifies the width of the border. It can be set to a specific value in pixels (e.g., 2px), or you can use predefined values such as thin, medium, or thick. You can also specify different widths for each side of the border using the shorthand notation (e.g., border-width: 1px 2px 3px 4px; for top, right, bottom, left respectively).
        (b) "border-style" This defines the style of the border. Some common values include solid (a solid line), dashed (a dashed line), dotted (a dotted line), double (two parallel lines), and none (no border). You can also use hidden to hide the border, but it will still take up space.
        (c) "border-color" This sets the color of the border. You can use color names (e.g., red, blue), hexadecimal values (e.g., #FF0000 for red), RGB values (e.g., rgb(255, 0, 0) for red), or RGBA values (e.g., rgba(255, 0, 0, 0.5) for red with 50% opacity).

        Here's some examples that demonstrates how to apply a border to a <div> element:

            (I) All of the Them in different tags

                div {
                    border-width: 2px 4px;
                    border-style: solid dotted;
                    border-color: red blue;
                }

            (II) All of the Them in the same tag

                div {
                    border: 2px solid red;
                }

        Additionally, you can set individual properties for each side of the border using the longhand properties:

        (d) `border-top`, `border-right`, `border-bottom`, `border-left`: These properties allow you to set the individual properties for each side of the border.

            border-top-width: 2px;
            border-top-style: dashed;
            border-top-color: red;

    (iii) Height/Width

        (a) The `height` property sets the height of an element, determining its vertical dimension.
            
            (I) Values: It Accepts Length Values
            
            for example:-

                height: 100px;

        (b) The `width` property sets the width of an element, determining its horizontal dimension.
            
            (I) Values: Like height, it also Accepts Length Values
              
            for example:-

                width: 50%;

6. Display Property

    (i) "Display" property is used to control the layout behavior of an element. It specifies how an element should be displayed on the web page. The display property allows you to control whether an element is rendered as a block, inline, inline-block, flex container, grid container, and more. Here's how you can use the display property:

        selector {
            display: value;
        }

    (ii) The value can be one of the following commonly used values:

    (iii) block: The element is rendered as a block-level element. It takes up the full width available by default and starts on a new line.

    (iv) inline: The element is rendered as an inline-level element. It does not start on a new line and only occupies the space necessary for its content (disables: top-bottom margin/padding, width, height).

    (v) inline-block: The element is rendered as an inline-level element but behaves like a block-level element in terms of layout. It does not start on a new line and allows for setting width, height, padding, and margin properties.

    (vi) none: The element is not rendered at all. It is effectively removed from the document flow and not visible.

    (vii) flex: The element becomes a flex container. It enables a flex formatting context and allows you to use flexbox properties for its children.

    (viii) grid: The element becomes a grid container. It enables a grid formatting context and allows you to use grid properties for its children.

    (ix) inline-flex: The element becomes an inline-level flex container. It behaves like an inline-level element but allows for flexbox properties for its children.

    (x) inline-grid: The element becomes an inline-level grid container. It behaves like an inline-level element but allows for grid properties for its children.

    (xi) These are just a few commonly used values of the display property. There are additional values and combinations available, depending on the CSS version and layout needs.

    (xi) Here's an example that demonstrates how to use the display property:

        div {
            display: block;
        }

7. Transition Property

    (i) "transition" property allows you to specify the properties that should be transitioned and the duration and timing function of the transition. Here's how you can use it:

        selector {
            transition: [property] [duration] [timing-function];
        }
    
    Let's break down each component:

    (ii) [property]: This specifies the CSS property or properties that should be transitioned. For example, you can use background-color, opacity, width, or any other CSS property.

    (iii) [duration]: This determines the duration of the transition effect. It can be specified in seconds (s) or milliseconds (ms). For example, 0.5s represents a transition duration of 0.5 seconds.

    (iv) [timing-function]: This defines the timing function or easing function of the transition. It specifies how the transition progresses over time. Some common timing functions include linear, ease, ease-in, ease-out, and ease-in-out. You can also use custom cubic-bezier values for more precise control.

    Here's an example that demonstrates how to add a transition effect to change the background color when hovering over a <button> element:-

        button {
            background-color: blue;
            transition: background-color 0.3s ease;
        }

            button:hover {
            background-color: red;
        }

Section: Common Values

9. Length Values:

    Absolute Length Units:

    (i) `px (Pixels)`: One pixel is a single dot on a screen. Pixel values are commonly used for specifying exact sizes.

        width: 200px;
    
    (ii) `in (Inches)`: One inch is equivalent to 2.54 centimeters.

        width: 2in;
    
    (iii) `cm (Centimeters)`: One centimeter is equal to one hundredth of a meter.

        height: 5cm;
    
    (iv) `mm (Millimeters)`: One millimeter is equal to one thousandth of a meter.

        padding: 10mm;
    
    Relative Length Units:
    
    (v) `em`: The em unit is relative to the font-size of the nearest parent or the element itself.

        font-size: 1.5em; /* 1.5 times the font size of the parent or the element itself */

    (vi) `rem (Root EM)`: Similar to em, but it is relative to the font-size of the root element (html).

        font-size: 1.2rem; /* 1.2 times the font size of the root element */

    (vii) `% (Percentage)`: The percentage unit is relative to the size of the parent element.

        width: 50%; /* 50% of the width of the parent element */

    (viii) `vw (Viewport Width) and vh (Viewport Height)`: These units are relative to the size of the viewport (the visible portion of the browser window).

        width: 50vw; /* 50% of the viewport width */
        height: 30vh; /* 30% of the viewport height */

10. Color Values

    (i) In CSS, color values are used to specify the color of various elements on a webpage. There are several ways to represent colors in CSS, and they can be broadly categorized into named colors, hexadecimal colors, RGB colors, RGBA colors, HSL colors, and HSLA colors.

    (ii) Named Colors:
        
        color: red;
        
        (a) Named colors are predefined color names that you can use directly in your CSS. Examples include red, blue, green, etc. The full list of named colors can be found in the CSS specification.

    (iii) Hexadecimal Colors:

        color: #ff0000;

        (a) Hexadecimal colors are represented using a combination of six characters, where each pair represents the intensity of the red, green, and blue color channels. For example, `#ff0000` represents pure red.

    (iv) RGB Colors:

        color: rgb(255, 0, 0);
        
        (a) RGB colors are specified using the `rgb()` function, which takes three values (red, green, and blue) ranging from 0 to 255. For example, `rgb(255, 0, 0)` also represents pure red.

    (v) RGBA Colors:

        color: rgba(255, 0, 0, 0.5);
        
        (a) RGBA colors are similar to RGB but include an additional parameter for alpha, representing the color's transparency. The alpha value ranges from 0 (completely transparent) to 1 (completely opaque). For example, `rgba(255, 0, 0, 0.5)` is a semi-transparent red.

    (vi) HSL Colors:

        color: hsl(0, 100%, 50%);
        
        (a) HSL stands for Hue, Saturation, and Lightness. The hsl() function takes three parameters: the hue (0 to 360 degrees), saturation (0% to 100%), and lightness (0% to 100%). For example, hsl(0, 100%, 50%) represents pure red.

    (vii) HSLA Colors:

        color: hsla(0, 100%, 50%, 0.5);

        (a) HSLA colors are similar to HSL but include an alpha parameter for transparency, just like RGBA. For example, hsla(0, 100%, 50%, 0.5) is a semi-transparent red.
    